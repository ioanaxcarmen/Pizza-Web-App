{"version":3,"file":"powerbi-client-react.js","mappings":"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","sources":["webpack://powerbi-client-react/webpack/universalModuleDefinition","webpack://powerbi-client-react/external umd \"lodash.isequal\"","webpack://powerbi-client-react/external umd \"powerbi-client\"","webpack://powerbi-client-react/external umd \"react\"","webpack://powerbi-client-react/webpack/bootstrap","webpack://powerbi-client-react/webpack/runtime/compat get default export","webpack://powerbi-client-react/webpack/runtime/define property getters","webpack://powerbi-client-react/webpack/runtime/hasOwnProperty shorthand","webpack://powerbi-client-react/webpack/runtime/make namespace object","webpack://powerbi-client-react/./src/PowerBIEmbed.tsx","webpack://powerbi-client-react/./src/utils.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"powerbi-client\"), require(\"lodash.isequal\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"powerbi-client\", \"lodash.isequal\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"powerbi-client-react\"] = factory(require(\"react\"), require(\"powerbi-client\"), require(\"lodash.isequal\"));\n\telse\n\t\troot[\"powerbi-client-react\"] = factory(root[\"react\"], root[\"powerbi-client\"], root[\"lodash.isequal\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__155__, __WEBPACK_EXTERNAL_MODULE__164__, __WEBPACK_EXTERNAL_MODULE__695__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__695__;","module.exports = __WEBPACK_EXTERNAL_MODULE__164__;","module.exports = __WEBPACK_EXTERNAL_MODULE__155__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport * as React from 'react';\r\nimport {\r\n\tservice,\r\n\tfactories,\r\n\tReport,\r\n\tEmbed,\r\n\tDashboard,\r\n\tTile,\r\n\tQna,\r\n\tVisual,\r\n\tIQnaEmbedConfiguration,\r\n\tIVisualEmbedConfiguration,\r\n\tIReportEmbedConfiguration,\r\n\tIDashboardEmbedConfiguration,\r\n\tITileEmbedConfiguration,\r\n} from 'powerbi-client';\r\nimport { IReportCreateConfiguration, IPaginatedReportLoadConfiguration } from 'powerbi-models';\r\nimport isEqual from 'lodash.isequal';\r\nimport { stringifyMap, SdkType, SdkWrapperVersion } from './utils';\r\n\r\n/**\r\n * Type for event handler function of embedded entity\r\n */\r\nexport type EventHandler = ((event?: service.ICustomEvent<any>, embeddedEntity?: Embed) => void) | null;\r\n\r\n/**\r\n * Props interface for PowerBIEmbed component\r\n */\r\nexport interface EmbedProps {\r\n\r\n\t// Configuration for embedding the PowerBI entity (Required)\r\n\tembedConfig:\r\n\t\t| IReportEmbedConfiguration\r\n\t\t| IDashboardEmbedConfiguration\r\n\t\t| ITileEmbedConfiguration\r\n\t\t| IQnaEmbedConfiguration\r\n\t\t| IVisualEmbedConfiguration\r\n\t\t| IPaginatedReportLoadConfiguration\r\n\t\t| IReportCreateConfiguration;\r\n\r\n\t// Callback method to get the embedded PowerBI entity object (Optional)\r\n\tgetEmbeddedComponent?: { (embeddedComponent: Embed): void };\r\n\r\n\t// Map of pair of event name and its handler method to be triggered on the event (Optional)\r\n\teventHandlers?: Map<string, EventHandler>;\r\n\r\n\t// CSS class to be set on the embedding container (Optional)\r\n\tcssClassName?: string;\r\n\r\n\t// Phased embedding flag (Optional)\r\n\tphasedEmbedding?: boolean;\r\n\r\n\t// Provide a custom implementation of PowerBI service (Optional)\r\n\tservice?: service.Service;\r\n}\r\n\r\nexport enum EmbedType {\r\n\tCreate = 'create',\r\n\tReport = 'report',\r\n\tDashboard = 'dashboard',\r\n\tTile = 'tile',\r\n\tQna = 'qna',\r\n\tVisual = 'visual'\r\n}\r\n\r\n/**\r\n * Base react component to embed Power BI entities like: reports, dashboards, tiles, visual and qna containers.\r\n */\r\nexport class PowerBIEmbed extends React.Component<EmbedProps> {\r\n\r\n\t// Embedded entity\r\n\t// Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n\tprivate _embed?: Embed;\r\n\r\n\t// Powerbi service\r\n\tprivate powerbi: service.Service;\r\n\r\n\t// Ref to the HTML div element\r\n\tprivate containerRef = React.createRef<HTMLDivElement>();\r\n\r\n\t// JSON stringify of prev event handler map\r\n\tprivate prevEventHandlerMapString = '';\r\n\r\n\t// Getter for this._embed\r\n\tprivate get embed(): Embed | undefined {\r\n\t\treturn this._embed;\r\n\t};\r\n\r\n\t// Setter for this._embed\r\n\tprivate set embed(newEmbedInstance: Embed | undefined) {\r\n\t\tthis._embed = newEmbedInstance;\r\n\r\n\t\t// Invoke callback method in props to return this embed instance\r\n\t\tthis.invokeGetEmbedCallback();\r\n\t};\r\n\r\n\tconstructor(props: EmbedProps) {\r\n\t\tsuper(props);\r\n\r\n\t\tif (this.props.service) {\r\n\t\t\tthis.powerbi = this.props.service;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.powerbi = new service.Service(\r\n\t\t\t\tfactories.hpmFactory,\r\n\t\t\t\tfactories.wpmpFactory,\r\n\t\t\t\tfactories.routerFactory);\r\n\t\t}\r\n\r\n\t\tthis.powerbi.setSdkInfo(SdkType, SdkWrapperVersion);\r\n\t};\r\n\r\n\tcomponentDidMount(): void {\r\n\r\n\t\t// Check if HTML container is available\r\n\t\tif (this.containerRef.current) {\r\n\r\n\t\t\t// Decide to embed, load or bootstrap\r\n\t\t\tif (this.props.embedConfig.accessToken && this.props.embedConfig.embedUrl) {\r\n\t\t\t\tthis.embedEntity();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.embed = this.powerbi.bootstrap(this.containerRef.current, this.props.embedConfig);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set event handlers if available\r\n\t\tif (this.props.eventHandlers && this.embed) {\r\n\t\t\tthis.setEventHandlers(this.embed, this.props.eventHandlers);\r\n\t\t}\r\n\t};\r\n\r\n\tasync componentDidUpdate(prevProps: EmbedProps): Promise<void> {\r\n\r\n\t\t// Set event handlers if available\r\n\t\tif (this.props.eventHandlers && this.embed) {\r\n\t\t\tthis.setEventHandlers(this.embed, this.props.eventHandlers);\r\n\t\t}\r\n\r\n\t\t// Re-embed when the current embedConfig differs from the previous embedConfig\r\n\t\tif(!isEqual(this.props.embedConfig, prevProps.embedConfig)){\r\n\t\t\tthis.embedEntity();\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentWillUnmount(): void {\r\n\t\t// Clean Up\r\n\t\tif (this.containerRef.current) {\r\n\t\t\tthis.powerbi.reset(this.containerRef.current);\r\n\t\t}\r\n\r\n\t\t// Set the previous event handler map string to empty\r\n\t\tthis.prevEventHandlerMapString = '';\r\n\t};\r\n\r\n\trender(): JSX.Element {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tref={this.containerRef}\r\n\t\t\t\tclassName={this.props.cssClassName}>\r\n\t\t\t</div>\r\n\t\t)\r\n\t};\r\n\r\n\t/**\r\n\t * Embed the powerbi entity (Load for phased embedding)\r\n\t */\r\n\tprivate embedEntity(): void {\r\n\t\t// Ensure that the HTML container is rendered and available\r\n\t\t// Also check if the Embed URL and Access Token are present in current props\r\n\t\tif (!this.containerRef.current || !this.props.embedConfig.accessToken || !this.props.embedConfig.embedUrl) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Load when props.phasedEmbedding is true and embed type is report, embed otherwise\r\n\t\tif (this.props.phasedEmbedding && this.props.embedConfig.type === EmbedType.Report) {\r\n\t\t\tthis.embed = this.powerbi.load(this.containerRef.current, this.props.embedConfig);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.props.phasedEmbedding) {\r\n\t\t\t\tconsole.error(`Phased embedding is not supported for type ${this.props.embedConfig.type}`)\r\n\t\t\t}\r\n\r\n\t\t\tif (this.props.embedConfig.type === EmbedType.Create) {\r\n\t\t\t\tthis.embed = this.powerbi.createReport(this.containerRef.current, this.props.embedConfig as IReportCreateConfiguration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.embed = this.powerbi.embed(this.containerRef.current, this.props.embedConfig);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets all event handlers from the props on the embedded entity\r\n\t *\r\n\t * @param embed Embedded object\r\n\t * @param eventHandlers Array of eventhandlers to be set on embedded entity\r\n\t * @returns void\r\n\t */\r\n\tprivate setEventHandlers(\r\n\t\tembed: Embed,\r\n\t\teventHandlerMap: Map<string, EventHandler>\r\n\t): void {\r\n\t\t// Get string representation of eventHandlerMap\r\n\t\tconst eventHandlerMapString = stringifyMap(this.props.eventHandlers);\r\n\r\n\t\t// Check if event handler map changed\r\n\t\tif (this.prevEventHandlerMapString === eventHandlerMapString) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Update prev string representation of event handler map\r\n\t\tthis.prevEventHandlerMapString = eventHandlerMapString;\r\n\r\n\t\t// List of allowed events\r\n\t\tlet allowedEvents = Embed.allowedEvents;\r\n\r\n\t\tconst entityType = embed.embedtype;\r\n\r\n\t\t// Append entity specific events\r\n\t\tswitch (entityType) {\r\n\t\t\tcase EmbedType.Create:\r\n\t\t\t\tbreak;\r\n\t\t\tcase EmbedType.Report:\r\n\t\t\t\tallowedEvents = [...allowedEvents, ...Report.allowedEvents];\r\n\t\t\t\tbreak;\r\n\t\t\tcase EmbedType.Dashboard:\r\n\t\t\t\tallowedEvents = [...allowedEvents, ...Dashboard.allowedEvents];\r\n\t\t\t\tbreak;\r\n\t\t\tcase EmbedType.Tile:\r\n\t\t\t\tallowedEvents = [...allowedEvents, ...Tile.allowedEvents];\r\n\t\t\t\tbreak;\r\n\t\t\tcase EmbedType.Qna:\r\n\t\t\t\tallowedEvents = [...allowedEvents, ...Qna.allowedEvents];\r\n\t\t\t\tbreak;\r\n\t\t\tcase EmbedType.Visual:\r\n\t\t\t\tallowedEvents = [...allowedEvents, ...Visual.allowedEvents];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error(`Invalid embed type ${entityType}`);\r\n\t\t}\r\n\r\n\t\t// Holds list of events which are not allowed\r\n\t\tconst invalidEvents: Array<string> = [];\r\n\r\n\t\t// Apply all provided event handlers\r\n\t\teventHandlerMap.forEach((eventHandlerMethod, eventName) => {\r\n\t\t\t// Check if this event is allowed\r\n\t\t\tif (allowedEvents.includes(eventName)) {\r\n\r\n\t\t\t\t// Removes event handler for this event\r\n\t\t\t\tembed.off(eventName);\r\n\r\n\t\t\t\t// Event handler is effectively removed for this event when eventHandlerMethod is null\r\n\t\t\t\tif (eventHandlerMethod) {\r\n\r\n\t\t\t\t\t// Set single event handler\r\n\t\t\t\t\tembed.on(eventName, (event: service.ICustomEvent<any>): void => {\r\n\t\t\t\t\t\teventHandlerMethod(event, this.embed);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Add this event name to the list of invalid events\r\n\t\t\t\tinvalidEvents.push(eventName);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Handle invalid events\r\n\t\tif (invalidEvents.length) {\r\n\t\t\tconsole.error(`Following events are invalid: ${invalidEvents.join(',')}`);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the embedded object via _getEmbed_ callback method provided in props\r\n\t *\r\n\t * @returns void\r\n\t */\r\n\tprivate invokeGetEmbedCallback(): void {\r\n\t\tif (this.props.getEmbeddedComponent && this.embed) {\r\n\t\t\tthis.props.getEmbeddedComponent(this.embed);\r\n\t\t}\r\n\t};\r\n}","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { EmbedProps } from \"./PowerBIEmbed\";\r\n\r\n/**\r\n * Get JSON string representation of the given map.\r\n *\r\n * @param map Map of event and corresponding handler method\r\n *\r\n * For example:\r\n * Input:\r\n * ```\r\n *  Map([\r\n\t\t['loaded', null],\r\n\t\t['rendered', function () { console.log('Rendered'); }]\r\n\t]);\r\n * ```\r\n * Output:\r\n * ```\r\n * `[[\"loaded\",\"\"],[\"rendered\",\"function () { console.log('Rendered'); }\"]]`\r\n * ```\r\n */\r\nexport function stringifyMap(map: EmbedProps['eventHandlers']): string {\r\n\r\n\t// Return empty string for empty/null map\r\n\tif (!map) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\t// Get entries of map as array\r\n\tconst mapEntries = Array.from(map);\r\n\r\n\t// Return JSON string\r\n\treturn JSON.stringify(mapEntries.map((mapEntry) => {\r\n\r\n\t\t// Convert event handler method to a string containing its source code for comparison\r\n\t\treturn [\r\n\t\t\tmapEntry[0],\r\n\t\t\tmapEntry[1] ? mapEntry[1].toString() : ''\r\n\t\t];\r\n\t}));\r\n};\r\n\r\n// SDK information to be used with service instance\r\nexport const SdkType = \"powerbi-client-react\";\r\nexport const SdkWrapperVersion = \"2.0.0\";"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__155__","__WEBPACK_EXTERNAL_MODULE__164__","__WEBPACK_EXTERNAL_MODULE__695__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","EmbedType","props","containerRef","prevEventHandlerMapString","service","powerbi","Service","factories","hpmFactory","wpmpFactory","routerFactory","setSdkInfo","this","_embed","newEmbedInstance","invokeGetEmbedCallback","componentDidMount","current","embedConfig","accessToken","embedUrl","embedEntity","embed","bootstrap","eventHandlers","setEventHandlers","componentDidUpdate","prevProps","componentWillUnmount","reset","render","ref","className","cssClassName","phasedEmbedding","type","Report","load","console","error","Create","createReport","eventHandlerMap","eventHandlerMapString","map","mapEntries","Array","from","JSON","stringify","mapEntry","toString","stringifyMap","allowedEvents","Embed","entityType","embedtype","Dashboard","Tile","Qna","Visual","invalidEvents","forEach","eventHandlerMethod","eventName","includes","off","on","event","push","length","join","getEmbeddedComponent"],"sourceRoot":""}